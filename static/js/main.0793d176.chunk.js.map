{"version":3,"sources":["State/task-reducer.ts","State/todolist-reducer.ts","Redux/store.ts","TodoList/AddItemForm/AddItemForm.tsx","TodoList/Button/MyButton.tsx","TodoList/Input/MyInput.tsx","TodoList/EditableTitle/EditableTitle.tsx","TodoList/Task/Task.tsx","TodoList/TodoList.tsx","Header/Header.tsx","App.tsx","index.tsx"],"names":["initState","changeTitleTaskAC","todoListId","taskId","title","type","rootReducer","combineReducers","tasks","state","action","stateCopy","id","v1","isDone","filter","t","map","trim","todoLists","tl","todoListTitle","find","todoListFilter","td","store","createStore","AddItemForm","React","memo","props","useState","error","setError","inpValue","setInpValue","isInpEmpty","value","showError","errorText","addNewTask","addItem","className","TextField","label","variant","helperText","onChange","e","currentTarget","onKeyPress","charCode","IconButton","style","alignSelf","color","onClick","aria-label","Add","MyButton","MyInput","autoFocus","onBlur","EditableTitle","setTitle","editMode","setEditMode","defaultValue","onDoubleClick","Task","dispatch","useDispatch","taskStatusChange","useCallback","task","checked","changeTaskTitle","onKeyChangeTaskTitle","Checkbox","taskTitleError","deleteTask","TodoList","useSelector","setTaskFilterAll","todoFilter","setTaskFilterActive","setTaskFilterCompleted","deleteTaskAC","addTaskAC","changeTodoListTitle","changeTodoListTitleOnKey","allTodoListTasks","tasksForTodoList","deleteItem","key","Header","AppBar","position","Toolbar","edge","Menu","Typography","App","changeFilterTodoListAC","addTodoList","addTodoListAC","deleteTodoList","setNewTodoTitle","changeTitleTodoListAC","Container","maxWidth","Grid","container","spacing","item","Paper","elevation","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0793d176.chunk.js","sourcesContent":["import {TasksType} from \"../TodoList/TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListType, RemoveTodoListType} from \"./todolist-reducer\";\r\n\r\ntype ActionType = AddTask | DeleteTask | ChangeTitleTask | ChangeTaskStatus | AddTodoListType | RemoveTodoListType\r\ntype AddTask = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    id: string\r\n}\r\ntype DeleteTask = {\r\n    type: 'DELETE-TASK'\r\n    todoListId: string\r\n    taskId: string\r\n}\r\ntype ChangeTitleTask = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    todoListId: string\r\n    taskId: string\r\n    title: string\r\n}\r\ntype ChangeTaskStatus = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    todoListId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\n\r\nconst initState: TasksType = {}\r\n\r\nexport const taskReducer = (state: TasksType = initState, action: ActionType): TasksType => {\r\n    switch (action.type) {\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.id] = [...stateCopy[action.id], {id: v1(), title: action.title, isDone: false}];\r\n            return stateCopy\r\n        }\r\n        case \"DELETE-TASK\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListId] = state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListId] = stateCopy[action.todoListId]\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title.trim()} : t)\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListId] = stateCopy[action.todoListId]\r\n                .map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t)\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListId] = []\r\n            return stateCopy\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        default: return state\r\n    }\r\n}\r\nexport const addTaskAC = (title: string, id: string): AddTask => ({type: 'ADD-TASK', title, id})\r\nexport const deleteTaskAC = (todoListId: string, taskId: string): DeleteTask => {\r\n    return {type: 'DELETE-TASK', todoListId, taskId}\r\n}\r\nexport const changeTitleTaskAC = (todoListId: string, taskId: string, title: string): ChangeTitleTask => {\r\n    return {type: 'CHANGE-TASK-TITLE', todoListId, taskId, title}\r\n}\r\nexport const changeTaskStatus = (todoListId: string, taskId: string, isDone: boolean): ChangeTaskStatus => {\r\n    return {type: \"CHANGE-TASK-STATUS\", todoListId, taskId, isDone}\r\n}","import {TodoListsType} from \"../TodoList/TodoList\";\r\nimport {FilterType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype ActionType = AddTodoListType | RemoveTodoListType | ChangeTitleTodoListType | ChangeFilterTodoListType\r\nexport type AddTodoListType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type RemoveTodoListType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\ntype ChangeTitleTodoListType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    title: string\r\n    id: string\r\n}\r\ntype ChangeFilterTodoListType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filter: FilterType\r\n    id: string\r\n}\r\n\r\nconst initState: Array<TodoListsType> = []\r\n\r\nexport const todolistReducer = (state: Array<TodoListsType> = initState, action: ActionType): Array<TodoListsType> => {\r\n    switch (action.type) {\r\n        case \"ADD-TODOLIST\": {\r\n            return [...state, {id: action.todoListId, title: action.title, filter: 'all'}]\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            const todoListTitle = state.find(tl => tl.id === action.id);\r\n            if (todoListTitle) {\r\n                todoListTitle.title = action.title.trim();\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            const todoListFilter = state.find(td => td.id === action.id);\r\n            if (todoListFilter) {\r\n                todoListFilter.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default: return state\r\n    }\r\n}\r\nexport const addTodoListAC = (title: string): AddTodoListType => (\r\n    {type: 'ADD-TODOLIST', title, todoListId: v1()}\r\n)\r\nexport const removeTodoListAC = (id: string): RemoveTodoListType => {\r\n    return {type: 'REMOVE-TODOLIST', id}\r\n}\r\nexport const changeTitleTodoListAC = (title: string, id: string): ChangeTitleTodoListType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', title, id}\r\n}\r\nexport const changeFilterTodoListAC = (filter: FilterType, id: string): ChangeFilterTodoListType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', filter, id}\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"../State/task-reducer\";\r\nimport {todolistReducer} from \"../State/todolist-reducer\";\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todoLists: todolistReducer\r\n})\r\nexport const store = createStore(rootReducer)","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport './AddItemForm.scss';\r\nimport { IconButton, TextField} from \"@material-ui/core\";\r\nimport {Add} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    title?: string\r\n    errorText: string\r\n    addItem: (value: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function AddItemForm(props: PropsType) {\r\n\r\n    const [error, setError] = React.useState('');\r\n    const [inpValue, setInpValue] = React.useState('');\r\n\r\n    const isInpEmpty = (value: string) => value.trim() === '';\r\n    const showError = () => {\r\n        setInpValue('');\r\n        setError(props.errorText);\r\n    }\r\n    const onInpValueChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError('');\r\n        setInpValue(e.currentTarget.value);\r\n    }\r\n    const onKeyPressInpValueChange = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            isInpEmpty(inpValue) ? showError() : addNewTask();\r\n        }\r\n    }\r\n    const addNewTask = () => {\r\n        if (isInpEmpty(inpValue)) {\r\n            showError();\r\n        } else {\r\n            props.addItem(inpValue.trim());\r\n            setInpValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'ItemForm'}>\r\n            <div className={'itemFormWrap'}>\r\n                <div>\r\n                    <TextField\r\n                        label=\"Title\"\r\n                        variant=\"outlined\"\r\n                        error={!!error}\r\n                        helperText={error}\r\n                        value={inpValue}\r\n                        onChange={onInpValueChange}\r\n                        onKeyPress={onKeyPressInpValueChange}\r\n                    />\r\n                </div>\r\n                <IconButton\r\n                    style={{alignSelf: 'flex-start'}}\r\n                    color=\"primary\"\r\n                    onClick={addNewTask}\r\n                    aria-label=\"Add\">\r\n                    <Add />\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport './Button.scss'\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    title?: string\r\n    className?: string\r\n    color: ColorType\r\n    variant: VariantType\r\n    onClick: () => void\r\n}\r\ntype ColorType = \"inherit\" | \"primary\" | \"secondary\" | \"default\" | undefined\r\ntype VariantType = \"text\" | \"outlined\" | \"contained\" | undefined\r\n\r\nexport function MyButton(props: PropsType) {\r\n    return (\r\n        <div className={'Button'}>\r\n            <Button\r\n                variant={props.variant}\r\n                color={props.color}\r\n                className={props.className}\r\n                onClick={props.onClick}>\r\n                {props.title}\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, FocusEvent, KeyboardEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype PropsType = {\r\n    label: string\r\n    value: string\r\n    error: boolean\r\n    autoFocus: boolean\r\n    type: string\r\n    helperText: string\r\n    onKeyPress: (e: KeyboardEvent<HTMLInputElement>) => void\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onBlur: (e: FocusEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport function MyInput(props: PropsType) {\r\n    return (\r\n        <div>\r\n            <TextField\r\n                autoFocus={props.autoFocus}\r\n                label={props.label}\r\n                error={props.error}\r\n                helperText={props.helperText}\r\n                onKeyPress={props.onKeyPress}\r\n                onChange={props.onChange}\r\n                onBlur={props.onBlur}\r\n                value={props.value}\r\n                type={props.type}/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, FocusEvent, useState} from \"react\";\r\nimport './EditableTitle.scss';\r\nimport {MyInput} from \"../Input/MyInput\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    error: string\r\n    onChange: (title: string) => void\r\n    onKeyPress: (title: string) => void\r\n}\r\n\r\nexport const EditableTitle = React.memo(function EditableTitle(props: PropsType) {\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const isInpEmpty = (value: string) => value.trim() === '';\r\n    const showError = () => {\r\n        setTitle('');\r\n        setError(props.error);\r\n    }\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const disableActiveMode = (e: FocusEvent<HTMLInputElement>) => {\r\n        if (!isInpEmpty(e.currentTarget.defaultValue)) {\r\n            setEditMode(false);\r\n            setError('');\r\n            props.onChange(title);\r\n        } else {\r\n            showError()\r\n        }\r\n    }\r\n    const onTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError('')\r\n    }\r\n    const onKeyTitleChangeHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            if (!isInpEmpty(title)) {\r\n                props.onKeyPress(title);\r\n                setEditMode(false);\r\n            } else {\r\n                showError()\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'EditableTitle'}>\r\n            {\r\n                editMode\r\n                    ? <MyInput\r\n                        label=\"Change title\"\r\n                        error={!!error}\r\n                        helperText={error}\r\n                        onKeyPress={onKeyTitleChangeHandler}\r\n                        onChange={onTitleChangeHandler}\r\n                        onBlur={disableActiveMode}\r\n                        value={title}\r\n                        autoFocus\r\n                        type=\"text\"/>\r\n                    : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n            }\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport {changeTaskStatus, changeTitleTaskAC} from \"../../State/task-reducer\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableTitle} from \"../EditableTitle/EditableTitle\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TaskType} from \"../TodoList\";\r\n\r\ntype PropsType = {\r\n    taskTitleError: string\r\n    todoListId: string\r\n    task: TaskType\r\n    deleteTask: (taskId: string, todoListId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(function Task(props: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n    const taskStatusChange = React.useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeTaskStatus(props.todoListId, props.task.id, e.currentTarget.checked))\r\n    }, [dispatch])\r\n    const changeTaskTitle = React.useCallback((title: string) => {\r\n        dispatch(changeTitleTaskAC(props.todoListId, props.task.id, title))\r\n    }, [dispatch])\r\n    const onKeyChangeTaskTitle = React.useCallback((title: string) => {\r\n        dispatch(changeTitleTaskAC(props.todoListId, props.task.id, title))\r\n    }, [dispatch])\r\n\r\n    return <li className={props.task.isDone ? 'done' : ''}>\r\n        <Checkbox\r\n            color=\"primary\"\r\n            id={props.task.id}\r\n            checked={props.task.isDone}\r\n            onChange={taskStatusChange}/>\r\n        <EditableTitle\r\n            error={props.taskTitleError}\r\n            onKeyPress={onKeyChangeTaskTitle}\r\n            onChange={changeTaskTitle}\r\n            title={props.task.title}/>\r\n        <IconButton onClick={() => props.deleteTask(props.task.id, props.todoListId)}>\r\n            <DeleteIcon/>\r\n        </IconButton>\r\n    </li>\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport './TodoList.scss';\r\nimport {FilterType} from \"../App\";\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {MyButton} from \"./Button/MyButton\";\r\nimport {EditableTitle} from \"./EditableTitle/EditableTitle\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../Redux/store\";\r\nimport {addTaskAC, changeTaskStatus, changeTitleTaskAC, deleteTaskAC} from \"../State/task-reducer\";\r\nimport {Task} from \"./Task/Task\";\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    isDone: boolean\r\n    title: string\r\n}\r\nexport type TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n    todoFilter: (value: FilterType, todoListId: string) => void\r\n    deleteItem: (id: string) => void\r\n    changeTodoListTitle: (title: string, id: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo( function TodoList(props: PropsType) {\r\n\r\n    const taskErrorText: string = 'Task is required. Enter some task!!!';\r\n    const taskTitleError: string = 'Task required';\r\n    const todoListTitleError: string = 'Title required';\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<RootReducerType, Array<TaskType>>(state => state.tasks[props.id])\r\n\r\n    const setTaskFilterAll = React.useCallback(() => {\r\n        props.todoFilter('all', props.id);\r\n    }, [props.todoFilter, props.id])\r\n\r\n    const setTaskFilterActive = React.useCallback(() => {\r\n        props.todoFilter('active', props.id);\r\n    }, [props.todoFilter,props.id])\r\n\r\n    const setTaskFilterCompleted = React.useCallback(() => {\r\n        props.todoFilter('completed', props.id);\r\n    }, [props.todoFilter,props.id])\r\n\r\n    const deleteTask = React.useCallback((id: string, todoListId: string) => {\r\n        dispatch(deleteTaskAC(todoListId, id))\r\n    }, [dispatch])\r\n\r\n    const addNewTask = React.useCallback((title: string) => {\r\n        dispatch(addTaskAC(title, props.id))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = React.useCallback((title: string) => {\r\n        props.changeTodoListTitle(title, props.id);\r\n    },[props.changeTodoListTitle, props.id])\r\n\r\n    const changeTodoListTitleOnKey = React.useCallback((title: string) => {\r\n        props.changeTodoListTitle(title, props.id);\r\n    }, [props.changeTodoListTitle, props.id])\r\n\r\n    let allTodoListTasks = tasks\r\n    let tasksForTodoList = allTodoListTasks;\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodoList = allTodoListTasks.filter(t => !t.isDone);\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodoList = allTodoListTasks.filter(t => t.isDone);\r\n    }\r\n\r\n    return (\r\n        <div className={'TodoList'}>\r\n            <div className={'todoListTitle'}>\r\n                <EditableTitle\r\n                    error={todoListTitleError}\r\n                    onKeyPress={changeTodoListTitleOnKey}\r\n                    onChange={changeTodoListTitle}\r\n                    title={props.title}/>\r\n                <IconButton onClick={() => props.deleteItem(props.id)}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </div>\r\n            <AddItemForm\r\n                errorText={taskErrorText}\r\n                addItem={(title) => addNewTask(title)}/>\r\n            <ul className={'lists'}>\r\n                {\r\n                    tasksForTodoList.map(task => <Task\r\n                        key={task.id}\r\n                        todoListId={props.id}\r\n                        deleteTask={deleteTask}\r\n                        task={task}\r\n                        taskTitleError={taskTitleError}/>)\r\n                }\r\n            </ul>\r\n            <div className={'buttonBox'}>\r\n                <MyButton\r\n                    variant={props.filter === 'all' ? 'contained' : \"text\"}\r\n                    color={'default'}\r\n                    onClick={setTaskFilterAll}\r\n                    title={'All'}/>\r\n                <MyButton\r\n                    variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                    color={'secondary'}\r\n                    onClick={setTaskFilterActive}\r\n                    title={'Active'}/>\r\n                <MyButton\r\n                    variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                    color={\"primary\"}\r\n                    onClick={setTaskFilterCompleted}\r\n                    title={'Completed'}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport './Hider.scss'\r\nimport {AppBar, Button, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport function Header() {\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">News</Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { TodoList, TodoListsType} from \"./TodoList/TodoList\";\r\nimport {AddItemForm} from \"./TodoList/AddItemForm/AddItemForm\";\r\nimport {Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Header} from \"./Header/Header\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTodoListAC, changeFilterTodoListAC, changeTitleTodoListAC, removeTodoListAC} from \"./State/todolist-reducer\";\r\nimport {RootReducerType} from \"./Redux/store\";\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed';\r\n\r\nexport function App() {\r\n\r\n    const todoListErrorText: string = 'Title is required. Enter some title!!!'\r\n    const todoListTitle: string = 'Create List'\r\n\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<RootReducerType, Array<TodoListsType>>(state => state.todoLists)\r\n\r\n    const todoFilter = React.useCallback((filter: FilterType, todoListId: string) => {\r\n        dispatch(changeFilterTodoListAC(filter, todoListId))\r\n    }, [dispatch])\r\n    const addTodoList = React.useCallback((title: string) => {\r\n        dispatch(addTodoListAC(title))\r\n    }, [dispatch])\r\n    const deleteTodoList = React.useCallback((todoListId: string) => {\r\n        dispatch(removeTodoListAC(todoListId))\r\n    }, [dispatch])\r\n    const setNewTodoTitle = React.useCallback((title: string, id: string) => {\r\n        dispatch(changeTitleTodoListAC(title, id))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Container maxWidth={\"lg\"}>\r\n                <Grid container>\r\n                    <AddItemForm\r\n                        errorText={todoListErrorText}\r\n                        title={todoListTitle}\r\n                        addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                    {\r\n                        todoLists.map(td => {\r\n                            return <Grid item key={td.id}>\r\n                                <Paper elevation={3}>\r\n                                    <TodoList\r\n                                        id={td.id}\r\n                                        title={td.title}\r\n                                        filter={td.filter}\r\n                                        todoFilter={todoFilter}\r\n                                        deleteItem={deleteTodoList}\r\n                                        changeTodoListTitle={setNewTodoTitle}/>\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Redux/store\";\r\nimport {App} from \"./App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n"],"sourceRoot":""}