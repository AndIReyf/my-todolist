{"version":3,"sources":["api/todolist-api.ts","utils/handle-error.ts","Redux/State/login-reducer.ts","Redux/State/app-reducer.ts","Redux/State/todolist-reducer.ts","Redux/State/task-reducer.ts","Redux/store.ts","components/Header/Header.tsx","components/Preloader/Preloader.tsx","components/Snackbar/Snackbar.tsx","components/AddItemForm/AddItemForm.tsx","components/Button/MyButton.tsx","components/Input/MyInput.tsx","components/EditableTitle/EditableTitle.tsx","components/Task/Task.tsx","components/TodoList/TodoList.tsx","components/TodoLists/TodoLists.tsx","components/Login/Login.tsx","App.tsx","index.tsx"],"names":["TaskStatus","TaskPriority","instance","axios","create","baseURL","withCredentials","headers","todoListAPI","get","title","post","todolistId","delete","put","taskId","partToUpdate","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorMessageAC","errorMessage","setAppStatusAC","status","handleServerNetworkError","error","message","slice","createSlice","name","initialState","isSignIn","reducers","setSignInAC","state","action","payload","loginReducer","reducer","actions","initialized","setAppInitializedAC","isInitialized","appReducer","addTodoListAC","unshift","todoList","filter","entityStatus","removeTodoListAC","index","findIndex","todo","id","splice","changeTitleTodoListAC","changeFilterTodoListAC","changeTodoListEntityStatusAC","setTodoListAC","todoLists","map","tl","todolistReducer","addTaskAC","task","todoListId","deleteTaskAC","tasks","t","setTasks","changeTaskTitleAC","trim","updateTaskAC","model","extraReducers","builder","addCase","forEach","taskReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","then","res","resultCode","catch","console","warn","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","Header","useDispatch","useSelector","logoutHandler","React","useCallback","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Menu","className","Button","onClick","useStyles","makeStyles","createStyles","root","width","height","top","Preloader","classes","LinearProgress","Alert","props","elevation","variant","MySnackbar","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AddItemForm","memo","useState","setError","inpValue","setInpValue","isInpEmpty","value","showError","errorText","addNewTask","addItem","TextField","label","helperText","onChange","e","currentTarget","onKeyPress","charCode","style","alignSelf","Add","MyButton","MyInput","autoFocus","onBlur","type","EditableTitle","setTitle","editMode","setEditMode","defaultValue","onDoubleClick","Task","changeTaskStatus","checked","Completed","New","changeTaskTitle","onKeyChangeTaskTitle","Checkbox","taskTitleError","deleteTask","TodoList","useEffect","items","setTaskFilterAll","todoFilter","setTaskFilterActive","setTaskFilterCompleted","deleteTaskTC","todosId","item","addTaskTC","changeTodoListTitle","changeTodoListTitleOnKey","allTodoListTasks","tasksForTodoList","deleteItem","key","TodoLists","deleteTodoList","setNewTodoTitle","updateTodoListTitleTC","addTodoList","createNewTodoListTC","Grid","container","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","Container","maxWidth","spacing","path","render","exact","left","transform","CircularProgress","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.826807c2.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '95a44df4-1e44-4034-980e-00368d0e9811'\r\n    }\r\n})\r\n\r\nexport const todoListAPI = {\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoListType>>('todo-lists')\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<CreateTodoListDataType>>('todo-lists', {title})\r\n    },\r\n    deleteTodoList(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoListTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<TasksPropertyType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, partToUpdate: UpdateTaskType) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, partToUpdate)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>('auth/me')\r\n    }\r\n}\r\n\r\n// Types\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype CreateTodoListDataType = {\r\n    item: TodoListType\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatus\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatus\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype TasksPropertyType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport enum TaskStatus {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriority {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}","import {setAppErrorMessageAC, setAppStatusAC} from \"../Redux/State/app-reducer\";\r\nimport {ResponseType} from '../api/todolist-api';\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorMessageAC({errorMessage: data.messages[0]}))\r\n    } else {\r\n        // If the message error will not come from server\r\n        dispatch(setAppErrorMessageAC({errorMessage: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n\r\n    const errorMessage = error.message ? error.message : 'Some error occurred :('\r\n\r\n    dispatch(setAppErrorMessageAC({errorMessage: errorMessage}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/handle-error\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initState = {isSignIn: false}\r\n\r\n// Reducer\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initState,\r\n    reducers: {\r\n        setSignInAC(state, action: PayloadAction<{isSignIn: boolean}>) {\r\n           state.isSignIn = action.payload.isSignIn\r\n        }\r\n    }\r\n})\r\n\r\nexport const loginReducer = slice.reducer\r\nexport const {setSignInAC} = slice.actions\r\n\r\n// Thunk Creator\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setSignInAC({isSignIn: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setSignInAC({isSignIn: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/todolist-api\";\r\nimport {setSignInAC} from \"./login-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initState: InitialStateType = {\r\n    status: \"idle\",\r\n    error: null,\r\n    initialized: false,\r\n}\r\n\r\n// Reducer\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initState,\r\n    reducers: {\r\n        setAppErrorMessageAC(state, action: PayloadAction<{errorMessage: string | null}>) {\r\n            state.error = action.payload.errorMessage\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{status: StatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppInitializedAC(state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.initialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppErrorMessageAC, setAppStatusAC, setAppInitializedAC} = slice.actions\r\n\r\n// Thunk Creator\r\nexport const initializedAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setSignInAC({isSignIn: true}))\r\n            }\r\n            dispatch(setAppInitializedAC({isInitialized: true}))\r\n        })\r\n}\r\n\r\n// Types\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: StatusType\r\n    error: string | null\r\n    initialized: boolean\r\n}\r\n","import {todoListAPI, TodoListType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC, StatusType} from \"./app-reducer\";\r\nimport {handleServerNetworkError} from \"../../utils/handle-error\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initState: Array<TodoListDomainType> = []\r\n\r\n// Reducer\r\nconst slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: initState,\r\n    reducers: {\r\n        addTodoListAC(state, action: PayloadAction<{ todoList: TodoListType }>) {\r\n            state.unshift({...action.payload.todoList, filter: 'all', entityStatus: \"idle\"})\r\n        },\r\n        removeTodoListAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.id)\r\n            if (index !== -1) state.splice(index, 1)\r\n        },\r\n        changeTitleTodoListAC(state, action: PayloadAction<{ title: string, id: string }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeFilterTodoListAC(state, action: PayloadAction<{ filter: FilterType, id: string }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodoListEntityStatusAC(state, action: PayloadAction<{ id: string, status: StatusType }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodoListAC(state, action: PayloadAction<{ todoLists: Array<TodoListType> }>) {\r\n            return action.payload.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistReducer = slice.reducer\r\nexport const {\r\n    addTodoListAC, removeTodoListAC, changeTitleTodoListAC,\r\n    changeFilterTodoListAC, changeTodoListEntityStatusAC, setTodoListAC\r\n} = slice.actions\r\n\r\n// Thunk Creator\r\nexport const fetchTodoListsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todoListAPI.getTodoLists()\r\n        .then(res => {\r\n            dispatch(setTodoListAC({todoLists: res.data}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const createNewTodoListTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todoListAPI.createTodoList(title)\r\n        .then(res => {\r\n            dispatch(addTodoListAC({todoList: res.data.data.item}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const deleteTodoListTC = (id: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodoListEntityStatusAC({id, status: 'loading'}))\r\n    todoListAPI.deleteTodoList(id)\r\n        .then(res => {\r\n            dispatch(removeTodoListAC({id}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const updateTodoListTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todoListAPI.updateTodoListTitle(id, title)\r\n        .then(res => {\r\n            dispatch(changeTitleTodoListAC({title, id}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\n\r\n// Types\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\nexport type TodoListDomainType = TodoListType & { filter: FilterType, entityStatus: StatusType }\r\n","import {TaskPriority, TaskStatus, TaskType, todoListAPI, UpdateTaskType} from \"../../api/todolist-api\";\r\nimport {TasksType} from \"../../components/TodoList/TodoList\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootReducerType} from \"../store\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/handle-error\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {addTodoListAC, removeTodoListAC, setTodoListAC} from \"./todolist-reducer\";\r\n\r\nconst initState: TasksType = {}\r\n\r\n// Reducer\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initState,\r\n    reducers: {\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        deleteTaskAC(state, action: PayloadAction<{ todoListId: string, taskId: string }>) {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index !== -1) tasks.splice(index, 1)\r\n        },\r\n        setTasks(state, action: PayloadAction<{ todoListId: string, tasks: Array<TaskType> }>) {\r\n            state[action.payload.todoListId] = action.payload.tasks\r\n        },\r\n        changeTaskTitleAC(state, action: PayloadAction<{ todoListId: string, taskId: string, title: string }>) {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index !== -1) tasks[index] = {...tasks[index], title: action.payload.title.trim()}\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ todoListId: string, taskId: string, model: UpdateDomainTaskType }>) {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index !== -1) tasks[index] = {...tasks[index], ...action.payload.model}\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodoListAC, (state, action) => {\r\n            state[action.payload.todoList.id] = []\r\n        });\r\n        builder.addCase(removeTodoListAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodoListAC, (state, action) => {\r\n            action.payload.todoLists.forEach(tl  => state[tl.id] = [])\r\n        })\r\n        // [addTodoListAC.type]: (state, action: PayloadAction<{}>) => {}\r\n    }\r\n})\r\n\r\nexport const taskReducer = slice.reducer\r\nexport const {addTaskAC, changeTaskTitleAC, deleteTaskAC, setTasks, updateTaskAC} = slice.actions\r\n\r\n// Thunk Creator\r\nexport const fetchTasksTC = (todoListId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todoListAPI.getTasks(todoListId)\r\n        .then(res => {\r\n            dispatch(setTasks({todoListId, tasks: res.data.items}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const addTaskTC = (todosId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todoListAPI.createTask(todosId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC({task: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const deleteTaskTC = (todoListId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todoListAPI.deleteTask(todoListId, taskId)\r\n        .then(() => {\r\n            dispatch(deleteTaskAC({todoListId, taskId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const updateTaskTC = (todoListId: string, taskId: string, domainModel: UpdateDomainTaskType) =>\r\n    (dispatch: Dispatch, getState: () => RootReducerType) => {\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todoListId].find(t => t.id === taskId)\r\n\r\n        // If task will be undefined\r\n        if (!task) {\r\n            console.warn('Task not found in the state!')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            status: task.status,\r\n            title: task.title,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todoListAPI.updateTask(todoListId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC({todoListId, taskId, model: domainModel}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch(error => handleServerNetworkError(error, dispatch))\r\n    }\r\n\r\n// Types\r\nexport type UpdateDomainTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatus\r\n    priority?: TaskPriority\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport {taskReducer} from \"./State/task-reducer\";\r\nimport {todolistReducer} from \"./State/todolist-reducer\";\r\nimport {appReducer} from \"./State/app-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {loginReducer} from \"./State/login-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todoLists: todolistReducer,\r\n    app: appReducer,\r\n    auth: loginReducer,\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})","import React from \"react\";\r\nimport './Hider.scss'\r\nimport {AppBar, Button, IconButton, Toolbar} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../Redux/store\";\r\nimport {logoutTC} from \"../../Redux/State/login-reducer\";\r\n\r\nexport function Header() {\r\n\r\n    const dispatch = useDispatch()\r\n    const isSignIn = useSelector<RootReducerType, boolean>(state => state.auth.isSignIn)\r\n\r\n    const logoutHandler = React.useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [isSignIn])\r\n\r\n    return (\r\n        <header>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <div className={'btn-box'}>\r\n                        {isSignIn && <Button onClick={logoutHandler} color=\"inherit\">Logout</Button>}\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            height: '4px',\r\n            position: 'absolute',\r\n            top: '64px'\r\n        },\r\n    }),\r\n)\r\n\r\nexport const Preloader = () => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LinearProgress color=\"secondary\" />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../Redux/store\";\r\nimport {setAppErrorMessageAC} from \"../../Redux/State/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function MySnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<RootReducerType, string | null>(state => state.app.error)\r\n    const isOpen = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') return;\r\n        dispatch(setAppErrorMessageAC({errorMessage: null}))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport './AddItemForm.scss';\r\nimport { IconButton, TextField} from \"@material-ui/core\";\r\nimport {Add} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    title?: string\r\n    errorText: string\r\n    addItem: (value: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function AddItemForm(props: PropsType) {\r\n\r\n    const [error, setError] = React.useState('');\r\n    const [inpValue, setInpValue] = React.useState('');\r\n\r\n    const isInpEmpty = (value: string) => value.trim() === '';\r\n    const showError = () => {\r\n        setInpValue('');\r\n        setError(props.errorText);\r\n    }\r\n    const onInpValueChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError('');\r\n        setInpValue(e.currentTarget.value);\r\n    }\r\n    const onKeyPressInpValueChange = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            isInpEmpty(inpValue) ? showError() : addNewTask();\r\n        }\r\n    }\r\n    const addNewTask = () => {\r\n        if (isInpEmpty(inpValue)) {\r\n            showError();\r\n        } else {\r\n            props.addItem(inpValue.trim());\r\n            setInpValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'ItemForm'}>\r\n            <div className={'itemFormWrap'}>\r\n                <div>\r\n                    <TextField\r\n                        label=\"Title\"\r\n                        variant=\"outlined\"\r\n                        error={!!error}\r\n                        helperText={error}\r\n                        value={inpValue}\r\n                        onChange={onInpValueChange}\r\n                        onKeyPress={onKeyPressInpValueChange}\r\n                    />\r\n                </div>\r\n                <IconButton\r\n                    style={{alignSelf: 'flex-start'}}\r\n                    color=\"primary\"\r\n                    onClick={addNewTask}\r\n                    aria-label=\"Add\">\r\n                    <Add />\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport './Button.scss'\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    title?: string\r\n    className?: string\r\n    color: ColorType\r\n    variant: VariantType\r\n    onClick: () => void\r\n}\r\ntype ColorType = \"inherit\" | \"primary\" | \"secondary\" | \"default\" | undefined\r\ntype VariantType = \"text\" | \"outlined\" | \"contained\" | undefined\r\n\r\nexport function MyButton(props: PropsType) {\r\n    return (\r\n        <div className={'Button'}>\r\n            <Button\r\n                variant={props.variant}\r\n                color={props.color}\r\n                className={props.className}\r\n                onClick={props.onClick}>\r\n                {props.title}\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, FocusEvent, KeyboardEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype PropsType = {\r\n    label: string\r\n    value: string\r\n    error: boolean\r\n    autoFocus: boolean\r\n    type: string\r\n    helperText: string\r\n    onKeyPress: (e: KeyboardEvent<HTMLInputElement>) => void\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onBlur: (e: FocusEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport function MyInput(props: PropsType) {\r\n    return (\r\n        <div>\r\n            <TextField\r\n                autoFocus={props.autoFocus}\r\n                label={props.label}\r\n                error={props.error}\r\n                helperText={props.helperText}\r\n                onKeyPress={props.onKeyPress}\r\n                onChange={props.onChange}\r\n                onBlur={props.onBlur}\r\n                value={props.value}\r\n                type={props.type}/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, FocusEvent, useState} from \"react\";\r\nimport './EditableTitle.scss';\r\nimport {MyInput} from \"../Input/MyInput\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    error: string\r\n    onChange: (title: string) => void\r\n    onKeyPress: (title: string) => void\r\n}\r\n\r\nexport const EditableTitle = React.memo(function EditableTitle(props: PropsType) {\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const isInpEmpty = (value: string) => value.trim() === '';\r\n    const showError = () => {\r\n        setTitle('');\r\n        setError(props.error);\r\n    }\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const disableActiveMode = (e: FocusEvent<HTMLInputElement>) => {\r\n        if (!isInpEmpty(e.currentTarget.defaultValue)) {\r\n            setEditMode(false);\r\n            setError('');\r\n            props.onChange(title);\r\n        } else {\r\n            showError()\r\n        }\r\n    }\r\n    const onTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError('')\r\n    }\r\n    const onKeyTitleChangeHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            if (!isInpEmpty(title)) {\r\n                props.onKeyPress(title);\r\n                setEditMode(false);\r\n            } else {\r\n                showError()\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'EditableTitle'}>\r\n            {\r\n                editMode\r\n                    ? <MyInput\r\n                        label=\"Change title\"\r\n                        error={!!error}\r\n                        helperText={error}\r\n                        onKeyPress={onKeyTitleChangeHandler}\r\n                        onChange={onTitleChangeHandler}\r\n                        onBlur={disableActiveMode}\r\n                        value={title}\r\n                        autoFocus\r\n                        type=\"text\"/>\r\n                    : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n            }\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport {updateTaskTC} from \"../../Redux/State/task-reducer\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableTitle} from \"../EditableTitle/EditableTitle\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TaskStatus, TaskType} from \"../../api/todolist-api\";\r\n\r\ntype PropsType = {\r\n    taskTitleError: string\r\n    todoListId: string\r\n    task: TaskType\r\n    deleteTask: (taskId: string, todoListId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(function Task(props: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const changeTaskStatus = React.useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTaskTC(props.todoListId, props.task.id,\r\n            {status : e.currentTarget.checked ? TaskStatus.Completed : TaskStatus.New}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = React.useCallback((title: string) => {\r\n        dispatch(updateTaskTC(props.todoListId, props.task.id, {title}))\r\n    }, [dispatch])\r\n\r\n    const onKeyChangeTaskTitle = React.useCallback((title: string) => {\r\n        dispatch(updateTaskTC(props.todoListId, props.task.id, {title}))\r\n    }, [dispatch])\r\n\r\n    return <li className={props.task.status === TaskStatus.Completed ? 'done' : ''}>\r\n        <Checkbox\r\n            color=\"primary\"\r\n            id={props.task.id}\r\n            checked={props.task.status === TaskStatus.Completed}\r\n            onChange={changeTaskStatus}/>\r\n        <EditableTitle\r\n            error={props.taskTitleError}\r\n            onKeyPress={onKeyChangeTaskTitle}\r\n            onChange={changeTaskTitle}\r\n            title={props.task.title}/>\r\n        <IconButton onClick={() => props.deleteTask(props.task.id, props.todoListId)}>\r\n            <DeleteIcon/>\r\n        </IconButton>\r\n    </li>\r\n})","import React from \"react\";\r\nimport './TodoList.scss';\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {MyButton} from \"../Button/MyButton\";\r\nimport {EditableTitle} from \"../EditableTitle/EditableTitle\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../Redux/store\";\r\nimport {addTaskTC, deleteTaskTC, fetchTasksTC} from \"../../Redux/State/task-reducer\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {TaskStatus, TaskType} from \"../../api/todolist-api\";\r\nimport {FilterType, TodoListDomainType} from \"../../Redux/State/todolist-reducer\";\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype PropsType = {\r\n    todoList: TodoListDomainType\r\n    todoFilter: (value: FilterType, todoListId: string) => void\r\n    deleteItem: (id: string) => void\r\n    changeTodoListTitle: (title: string, id: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo( function TodoList(props: PropsType) {\r\n\r\n    const taskErrorText: string = 'Task is required. Enter the task!';\r\n    const taskTitleError: string = 'Task required';\r\n    const todoListTitleError: string = 'Title required';\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<RootReducerType, Array<TaskType>>(state => state.tasks[props.todoList.id])\r\n\r\n    React.useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todoList.id))\r\n    }, [])\r\n\r\n    const setTaskFilterAll = React.useCallback(() => {\r\n        props.todoFilter('all', props.todoList.id);\r\n    }, [props.todoFilter, props.todoList.id])\r\n\r\n    const setTaskFilterActive = React.useCallback(() => {\r\n        props.todoFilter('active', props.todoList.id);\r\n    }, [props.todoFilter,props.todoList.id])\r\n\r\n    const setTaskFilterCompleted = React.useCallback(() => {\r\n        props.todoFilter('completed', props.todoList.id);\r\n    }, [props.todoFilter,props.todoList.id])\r\n\r\n    const deleteTask = React.useCallback((id: string, todoListId: string) => {\r\n        dispatch(deleteTaskTC(todoListId, id))\r\n    }, [dispatch])\r\n\r\n    const addNewTask = React.useCallback((title: string) => {\r\n        dispatch(addTaskTC(props.todoList.id, title))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = React.useCallback((title: string) => {\r\n        props.changeTodoListTitle(title, props.todoList.id);\r\n    },[props.changeTodoListTitle, props.todoList.id])\r\n\r\n    const changeTodoListTitleOnKey = React.useCallback((title: string) => {\r\n        props.changeTodoListTitle(title, props.todoList.id);\r\n    }, [props.changeTodoListTitle, props.todoList.id])\r\n\r\n    let allTodoListTasks = tasks\r\n    let tasksForTodoList = allTodoListTasks;\r\n\r\n    if (props.todoList.filter === 'active') {\r\n        tasksForTodoList = allTodoListTasks.filter(t => t.status === TaskStatus.New);\r\n    }\r\n    if (props.todoList.filter === 'completed') {\r\n        tasksForTodoList = allTodoListTasks.filter(t => t.status === TaskStatus.Completed);\r\n    }\r\n\r\n    return (\r\n        <div className={`TodoList ${props.todoList.entityStatus === 'loading' && 'disable'}`}>\r\n            <div className={'todoListTitle'}>\r\n                <EditableTitle\r\n                    error={todoListTitleError}\r\n                    onKeyPress={changeTodoListTitleOnKey}\r\n                    onChange={changeTodoListTitle}\r\n                    title={props.todoList.title}/>\r\n                <IconButton onClick={() => props.deleteItem(props.todoList.id)}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </div>\r\n            <AddItemForm\r\n                errorText={taskErrorText}\r\n                addItem={(title) => addNewTask(title)}/>\r\n            <ul className={'lists'}>\r\n                {\r\n                    tasksForTodoList.map(task => <Task\r\n                        key={task.id}\r\n                        todoListId={props.todoList.id}\r\n                        deleteTask={deleteTask}\r\n                        task={task}\r\n                        taskTitleError={taskTitleError}/>)\r\n                }\r\n            </ul>\r\n            <div className={'buttonBox'}>\r\n                <MyButton\r\n                    variant={props.todoList.filter === 'all' ? 'contained' : \"text\"}\r\n                    color={'default'}\r\n                    onClick={setTaskFilterAll}\r\n                    title={'All'}/>\r\n                <MyButton\r\n                    variant={props.todoList.filter === 'active' ? 'contained' : 'text'}\r\n                    color={'secondary'}\r\n                    onClick={setTaskFilterActive}\r\n                    title={'Active'}/>\r\n                <MyButton\r\n                    variant={props.todoList.filter === 'completed' ? 'contained' : 'text'}\r\n                    color={\"primary\"}\r\n                    onClick={setTaskFilterCompleted}\r\n                    title={'Completed'}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {TodoList} from \"../TodoList/TodoList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../Redux/store\";\r\nimport {\r\n    changeFilterTodoListAC, createNewTodoListTC,\r\n    deleteTodoListTC, fetchTodoListsTC,\r\n    FilterType,\r\n    TodoListDomainType,\r\n    updateTodoListTitleTC\r\n} from \"../../Redux/State/todolist-reducer\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport function TodoLists() {\r\n\r\n    const todoListErrorText: string = 'Title is required. Enter the title!'\r\n    const todoListTitle: string = 'Create List'\r\n\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<RootReducerType, Array<TodoListDomainType>>(state => state.todoLists)\r\n    const isSignIn = useSelector<RootReducerType, boolean>(state => state.auth.isSignIn)\r\n\r\n    React.useEffect(() => {\r\n        // If user is not sign in, app do not fetch todos.\r\n        if (!isSignIn) return\r\n        dispatch(fetchTodoListsTC())\r\n    }, [])\r\n\r\n    const deleteTodoList = React.useCallback((todoListId: string) => {\r\n        dispatch(deleteTodoListTC(todoListId))\r\n    }, [dispatch])\r\n\r\n    const setNewTodoTitle = React.useCallback((title: string, id: string) => {\r\n        dispatch(updateTodoListTitleTC(id, title))\r\n    }, [dispatch])\r\n\r\n    const todoFilter = React.useCallback((filter: FilterType, todoListId: string) => {\r\n        dispatch(changeFilterTodoListAC({filter, id: todoListId}))\r\n    }, [dispatch])\r\n\r\n    const addTodoList = React.useCallback((title: string) => {\r\n        dispatch(createNewTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    if (!isSignIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <AddItemForm\r\n                    errorText={todoListErrorText}\r\n                    title={todoListTitle}\r\n                    addItem={addTodoList}\r\n                />\r\n            </Grid>\r\n            {\r\n                todoLists.map(tl => {\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper elevation={3}>\r\n                            <TodoList\r\n                                todoList={tl}\r\n                                todoFilter={todoFilter}\r\n                                deleteItem={deleteTodoList}\r\n                                changeTodoListTitle={setNewTodoTitle}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../Redux/State/login-reducer\";\r\nimport {RootReducerType} from \"../../Redux/store\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport function Login() {\r\n\r\n    const dispatch = useDispatch()\r\n    const isSignIn = useSelector<RootReducerType, boolean>(state => state.auth.isSignIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            if (!values.email) return {email: 'Email is required!'}\r\n            if (!values.password) return {password: 'Password is required!'}\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    // If it has already been signed in, redirect to home page\r\n    if (isSignIn) return <Redirect to={'/'}/>\r\n\r\n    return (\r\n        <Grid container justify={'center'}>\r\n            <Grid item xs={4}>\r\n                {/*Hook useFormik gives handleSubmit function to take all form's values*/}\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>\r\n                                To sign in get registered <a href=\"https://social-network.samuraijs.com/\"\r\n                                                             target=\"_blank\">\r\n                                <strong>here</strong>\r\n                            </a>\r\n                            </p>\r\n                            <p>\r\n                                or use common test account credentials:\r\n                            </p>\r\n                            <p>\r\n                                Email: <b>free@samuraijs.com</b>\r\n                            </p>\r\n                            <p>\r\n                                Password: <b>free</b>\r\n                            </p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField type={'email'} label={'Email'} margin={'normal'}\r\n                                // Get all props from email\r\n                                       {...formik.getFieldProps('email')}\r\n                            />\r\n                            {/*Get an error message if email is not valid*/}\r\n                            {formik.errors.email && <div>{formik.errors.email}</div>}\r\n                            <TextField type={'password'} label={'Password'} margin={'normal'}\r\n                                       {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.errors.password && <div>{formik.errors.password}</div>}\r\n                            <FormControlLabel label={'Remember me'}\r\n                                              control={\r\n                                                  // Get all props from checkbox\r\n                                                  // checked value must be taken from formik\r\n                                                  <Checkbox color={'primary'} checked={formik.values.rememberMe}\r\n                                                            {...formik.getFieldProps('rememberMe')}\r\n                                                  />\r\n                                              }\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Sign in</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {CircularProgress, Container, Grid} from \"@material-ui/core\";\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"./Redux/store\";\r\nimport {Preloader} from \"./components/Preloader/Preloader\";\r\nimport {MySnackbar} from \"./components/Snackbar/Snackbar\";\r\nimport {initializedAppTC, StatusType} from \"./Redux/State/app-reducer\";\r\nimport {TodoLists} from \"./components/TodoLists/TodoLists\";\r\nimport {Route} from 'react-router-dom';\r\nimport {Login} from \"./components/Login/Login\";\r\n\r\nexport function App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<RootReducerType, StatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<RootReducerType, boolean>(state => state.app.initialized)\r\n\r\n    React.useEffect(() => {\r\n        dispatch(initializedAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div style={{position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            {status === 'loading' && <Preloader/>}\r\n            <MySnackbar/>\r\n            <Container maxWidth={\"lg\"}>\r\n                <Grid container spacing={2}>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route exact path={'/'} render={() => <TodoLists/>}/>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Redux/store\";\r\nimport {App} from \"./App\";\r\nimport {HashRouter as Router} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App/>\r\n        </Router>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n"],"sourceRoot":""}