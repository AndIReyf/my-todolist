{"version":3,"sources":["api/todolist-api.ts","utils/handle-error.ts","Redux/State/login-reducer.ts","Redux/State/app-reducer.ts","Redux/State/task-reducer.ts","Redux/State/todolist-reducer.ts","Redux/store.ts","components/Header/Header.tsx","components/Preloader/Preloader.tsx","components/Snackbar/Snackbar.tsx","components/AddItemForm/AddItemForm.tsx","components/Button/MyButton.tsx","components/Input/MyInput.tsx","components/EditableTitle/EditableTitle.tsx","components/Task/Task.tsx","components/TodoList/TodoList.tsx","components/TodoLists/TodoLists.tsx","components/Login/Login.tsx","App.tsx","index.tsx"],"names":["TaskStatus","TaskPriority","instance","axios","create","baseURL","withCredentials","headers","todoListAPI","get","title","post","todolistId","delete","put","taskId","partToUpdate","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorMessageAC","setAppStatusAC","handleServerNetworkError","error","message","initState","isSignIn","setSignInAC","type","status","initialized","errorMessage","updateTaskTC","todoId","domainModel","getState","task","tasks","find","t","id","apiModel","deadline","description","priority","startDate","then","res","resultCode","todoListId","model","updateTaskAC","catch","console","warn","rootReducer","combineReducers","state","action","filter","map","trim","todoList","stateCopy","todoLists","forEach","tl","td","entityStatus","app","isInitialized","auth","store","createStore","applyMiddleware","thunk","Header","useDispatch","useSelector","logoutHandler","React","useCallback","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Menu","className","Button","onClick","useStyles","makeStyles","createStyles","root","width","height","top","Preloader","classes","LinearProgress","Alert","props","elevation","variant","MySnackbar","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AddItemForm","memo","useState","setError","inpValue","setInpValue","isInpEmpty","value","showError","errorText","addNewTask","addItem","TextField","label","helperText","onChange","e","currentTarget","onKeyPress","charCode","style","alignSelf","Add","MyButton","MyInput","autoFocus","onBlur","EditableTitle","setTitle","editMode","setEditMode","defaultValue","onDoubleClick","Task","changeTaskStatus","checked","Completed","New","changeTaskTitle","onKeyChangeTaskTitle","Checkbox","taskTitleError","deleteTask","TodoList","useEffect","setTasks","items","setTaskFilterAll","todoFilter","setTaskFilterActive","setTaskFilterCompleted","deleteTaskAC","todosId","item","addTaskTC","changeTodoListTitle","changeTodoListTitleOnKey","allTodoListTasks","tasksForTodoList","deleteItem","key","TodoLists","deleteTodoList","changeTodoListEntityStatusAC","removeTodoListAC","setNewTodoTitle","changeTitleTodoListAC","updateTodoListTitleTC","changeFilterTodoListAC","addTodoList","createNewTodoListTC","Grid","container","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","Container","maxWidth","spacing","path","render","exact","left","transform","CircularProgress","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6882c773.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '95a44df4-1e44-4034-980e-00368d0e9811'\r\n    }\r\n})\r\n\r\nexport const todoListAPI = {\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoListType>>('todo-lists')\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<CreateTodoListDataType>>('todo-lists', {title})\r\n    },\r\n    deleteTodoList(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoListTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<TasksPropertyType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, partToUpdate: UpdateTaskType) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, partToUpdate)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>('auth/me')\r\n    }\r\n}\r\n\r\n// Types\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype CreateTodoListDataType = {\r\n    item: TodoListType\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatus\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatus\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype TasksPropertyType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport enum TaskStatus {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriority {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}","import {setAppErrorMessageAC, setAppStatusAC, SetErrorMessageType, SetStatusType} from \"../Redux/State/app-reducer\";\r\nimport {ResponseType} from '../api/todolist-api';\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: DispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorMessageAC(data.messages[0]))\r\n    } else {\r\n        // If the message error will not come from server\r\n        dispatch(setAppErrorMessageAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: DispatchType) => {\r\n    dispatch(setAppErrorMessageAC(error.message ? error.message : 'Some error occurred :('))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype DispatchType = Dispatch<SetErrorMessageType | SetStatusType>","import {Dispatch} from \"redux\";\r\nimport {setAppStatusAC, SetErrorMessageType, SetStatusType} from \"./app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/handle-error\";\r\n\r\nconst initState: InitialStateType = {\r\n    isSignIn: false\r\n}\r\n\r\n// Reducer\r\nexport const loginReducer = (state: InitialStateType = initState, action: ActionType): InitialStateType => {\r\n    switch (action.type){\r\n        case \"login/IS-SIGN-IN\": {\r\n            return {...state, isSignIn: action.isSignIn}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action Creator\r\nexport const setSignInAC = (isSignIn: boolean) => ({type: 'login/IS-SIGN-IN', isSignIn} as const)\r\n\r\n// Thunk Creator\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setSignInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const logoutTC = () => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setSignInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\n\r\n// Types\r\ntype InitialStateType = {\r\n    isSignIn: boolean\r\n}\r\n\r\ntype ActionType = SignInType\r\ntype SignInType = ReturnType<typeof setSignInAC>\r\n\r\ntype ThunkDispatchType = Dispatch<SetStatusType | SetErrorMessageType | ActionType>","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/todolist-api\";\r\nimport {setSignInAC} from \"./login-reducer\";\r\n\r\nconst initState: InitialStateType = {\r\n    status: \"idle\",\r\n    error: null,\r\n    initialized: false,\r\n}\r\n\r\n// Reducer\r\nexport const appReducer = (state: InitialStateType = initState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-ERROR-MESSAGE\": {\r\n            return {...state, error: action.errorMessage}\r\n        }\r\n        case \"APP/SET-STATUS\": {\r\n            return {...state, status: action.status}\r\n        }\r\n        case \"APP/SET-INITIALIZED-VALUE\": {\r\n            return {...state, initialized: action.isInitialized}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action Creator\r\nexport const setAppErrorMessageAC = (errorMessage: string | null) => ({type: 'APP/SET-ERROR-MESSAGE', errorMessage} as const)\r\nexport const setAppStatusAC = (status: StatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-INITIALIZED-VALUE', isInitialized} as const)\r\n\r\n// Thunk Creator\r\nexport const initializedAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setSignInAC(true))\r\n            }\r\n            dispatch(setAppInitializedAC(true))\r\n        })\r\n}\r\n\r\n// Types\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: StatusType\r\n    error: string | null\r\n    initialized: boolean\r\n}\r\ntype ActionType = SetErrorMessageType\r\n    | SetStatusType\r\n    | SetInitializedType\r\nexport type SetErrorMessageType = ReturnType<typeof setAppErrorMessageAC>\r\nexport type SetStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type SetInitializedType = ReturnType<typeof setAppInitializedAC>","import {AddTodoListType, RemoveTodoListType, SetTodoListType} from \"./todolist-reducer\";\r\nimport {TaskPriority, TaskStatus, TaskType, todoListAPI, UpdateTaskType} from \"../../api/todolist-api\";\r\nimport {TasksType} from \"../../components/TodoList/TodoList\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootReducerType} from \"../store\";\r\nimport {SetErrorMessageType, setAppStatusAC, SetStatusType} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/handle-error\";\r\n\r\nconst initState: TasksType = {}\r\n\r\n// Reducer\r\nexport const taskReducer = (state: TasksType = initState, action: ActionType): TasksType => {\r\n    switch (action.type) {\r\n        case \"ADD-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n        }\r\n        case \"DELETE-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: [...state[action.todoListId].filter(t => t.id !== action.taskId)]\r\n            }\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId]\r\n                    .map(t => t.id === action.taskId ? {...t, title: action.title.trim()} : t)\r\n            }\r\n        }\r\n        case \"UPDATE-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.todoList.id]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case \"SET-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\": {\r\n            return {...state, [action.todoListId]: action.tasks}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action Creator\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const deleteTaskAC = (todoListId: string, taskId: string) => ({type: 'DELETE-TASK', todoListId, taskId} as const)\r\nexport const changeTaskTitleAC = (todoListId: string, taskId: string, title: string) => (\r\n    {type: 'CHANGE-TASK-TITLE', todoListId, taskId, title} as const)\r\nexport const updateTaskAC = (todoListId: string, taskId: string, model: UpdateDomainTaskType) => (\r\n    {type: \"UPDATE-TASK\", todoListId, taskId, model} as const)\r\nexport const setTasks = (todoListId: string, tasks: Array<TaskType>) => (\r\n    {type: \"SET-TASKS\", todoListId, tasks} as const)\r\n\r\n// Thunk Creator\r\nexport const fetchTasksTC = (todoListId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListAPI.getTasks(todoListId)\r\n        .then(res => {\r\n            dispatch(setTasks(todoListId, res.data.items))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const addTaskTC = (todosId: string, title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListAPI.createTask(todosId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const deleteTaskTC = (todoId: string, taskId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListAPI.deleteTask(todoId, taskId)\r\n        .then(() => {\r\n            dispatch(deleteTaskAC(todoId, taskId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const updateTaskTC = (todoId: string, taskId: string, domainModel: UpdateDomainTaskType) =>\r\n    (dispatch: ThunkDispatchType, getState: () => RootReducerType) => {\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todoId].find(t => t.id === taskId)\r\n\r\n        // If task will be undefined\r\n        if (!task) {\r\n            console.warn('Task not found in the state!')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            status: task.status,\r\n            title: task.title,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        todoListAPI.updateTask(todoId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(todoId, taskId, domainModel))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch(error => handleServerNetworkError(error, dispatch))\r\n    }\r\n\r\n// Types\r\ntype ActionType = AddTaskType\r\n    | DeleteTaskType\r\n    | ChangeTaskTitleType\r\n    | UpdateTaskActionType\r\n    | AddTodoListType\r\n    | RemoveTodoListType\r\n    | SetTodoListType\r\n    | SetTasksActionType\r\n\r\ntype AddTaskType = ReturnType<typeof addTaskAC>\r\ntype DeleteTaskType = ReturnType<typeof deleteTaskAC>\r\ntype ChangeTaskTitleType = ReturnType<typeof changeTaskTitleAC>\r\ntype UpdateTaskActionType = ReturnType<typeof updateTaskAC>\r\ntype SetTasksActionType = ReturnType<typeof setTasks>\r\n\r\ntype ThunkDispatchType = Dispatch<ActionType | SetStatusType | SetErrorMessageType>\r\n\r\nexport type UpdateDomainTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatus\r\n    priority?: TaskPriority\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import {todoListAPI, TodoListType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppErrorMessageAC, setAppStatusAC, SetErrorMessageType, SetStatusType, StatusType} from \"./app-reducer\";\r\nimport {handleServerNetworkError} from \"../../utils/handle-error\";\r\n\r\nconst initState: Array<TodoListDomainType> = []\r\n\r\n// Reducer\r\nexport const todolistReducer = (state: Array<TodoListDomainType> = initState, action: ActionType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case \"SET-TODOLIST\": {\r\n            return action.todoLists.map(td => ({...td, filter: 'all', entityStatus: \"idle\"}))\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return [{...action.todoList, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title.trim()} : tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case \"CHANGE-TODOS-ENTITY-STATUS\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions Creator\r\nexport const addTodoListAC = (todoList: TodoListType) => ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const removeTodoListAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const changeTitleTodoListAC = (title: string, id: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title,\r\n    id\r\n} as const)\r\nexport const changeFilterTodoListAC = (filter: FilterType, id: string) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    filter,\r\n    id\r\n} as const)\r\nexport const changeTodoListEntityStatusAC = (id: string, status: StatusType) => ({\r\n    type: 'CHANGE-TODOS-ENTITY-STATUS',\r\n    id,\r\n    status\r\n} as const)\r\nexport const setTodoListAC = (todoLists: Array<TodoListType>) => ({type: 'SET-TODOLIST', todoLists} as const)\r\n\r\n// Thunk Creator\r\nexport const fetchTodoListsTC = () => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListAPI.getTodoLists()\r\n        .then(res => {\r\n            dispatch(setTodoListAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const createNewTodoListTC = (title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListAPI.createTodoList(title)\r\n        .then(res => {\r\n            dispatch(addTodoListAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const deleteTodoListTC = (id: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodoListEntityStatusAC(id, 'loading'))\r\n    todoListAPI.deleteTodoList(id)\r\n        .then(res => {\r\n            dispatch(removeTodoListAC(id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const updateTodoListTitleTC = (id: string, title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListAPI.updateTodoListTitle(id, title)\r\n        .then(res => {\r\n            dispatch(changeTitleTodoListAC(title, id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\n\r\n// Types\r\ntype ActionType = AddTodoListType\r\n    | RemoveTodoListType\r\n    | ChangeTitleTodoListType\r\n    | ChangeFilterTodoListType\r\n    | SetTodoListType\r\n    | ChangeTodoListEntityStatusType\r\n\r\nexport type SetTodoListType = ReturnType<typeof setTodoListAC>\r\nexport type AddTodoListType = ReturnType<typeof addTodoListAC>\r\nexport type RemoveTodoListType = ReturnType<typeof removeTodoListAC>\r\ntype ChangeTitleTodoListType = ReturnType<typeof changeTitleTodoListAC>\r\ntype ChangeFilterTodoListType = ReturnType<typeof changeFilterTodoListAC>\r\ntype ChangeTodoListEntityStatusType = ReturnType<typeof changeTodoListEntityStatusAC>\r\n\r\ntype ThunkDispatchType = Dispatch<ActionType | SetStatusType | SetErrorMessageType>\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\nexport type TodoListDomainType = TodoListType & { filter: FilterType, entityStatus: StatusType }\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"./State/task-reducer\";\r\nimport {todolistReducer} from \"./State/todolist-reducer\";\r\nimport {appReducer} from \"./State/app-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {loginReducer} from \"./State/login-reducer\";\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todoLists: todolistReducer,\r\n    app: appReducer,\r\n    auth: loginReducer,\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))","import React from \"react\";\r\nimport './Hider.scss'\r\nimport {AppBar, Button, IconButton, Toolbar} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../Redux/store\";\r\nimport {logoutTC} from \"../../Redux/State/login-reducer\";\r\n\r\nexport function Header() {\r\n\r\n    const dispatch = useDispatch()\r\n    const isSignIn = useSelector<RootReducerType, boolean>(state => state.auth.isSignIn)\r\n\r\n    const logoutHandler = React.useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [isSignIn])\r\n\r\n    return (\r\n        <header>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <div className={'btn-box'}>\r\n                        {isSignIn && <Button onClick={logoutHandler} color=\"inherit\">Logout</Button>}\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            height: '4px',\r\n            position: 'absolute',\r\n            top: '64px'\r\n        },\r\n    }),\r\n)\r\n\r\nexport const Preloader = () => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LinearProgress color=\"secondary\" />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../Redux/store\";\r\nimport {setAppErrorMessageAC} from \"../../Redux/State/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function MySnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<RootReducerType, string | null>(state => state.app.error)\r\n    const isOpen = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') return;\r\n        dispatch(setAppErrorMessageAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport './AddItemForm.scss';\r\nimport { IconButton, TextField} from \"@material-ui/core\";\r\nimport {Add} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    title?: string\r\n    errorText: string\r\n    addItem: (value: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function AddItemForm(props: PropsType) {\r\n\r\n    const [error, setError] = React.useState('');\r\n    const [inpValue, setInpValue] = React.useState('');\r\n\r\n    const isInpEmpty = (value: string) => value.trim() === '';\r\n    const showError = () => {\r\n        setInpValue('');\r\n        setError(props.errorText);\r\n    }\r\n    const onInpValueChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError('');\r\n        setInpValue(e.currentTarget.value);\r\n    }\r\n    const onKeyPressInpValueChange = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            isInpEmpty(inpValue) ? showError() : addNewTask();\r\n        }\r\n    }\r\n    const addNewTask = () => {\r\n        if (isInpEmpty(inpValue)) {\r\n            showError();\r\n        } else {\r\n            props.addItem(inpValue.trim());\r\n            setInpValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'ItemForm'}>\r\n            <div className={'itemFormWrap'}>\r\n                <div>\r\n                    <TextField\r\n                        label=\"Title\"\r\n                        variant=\"outlined\"\r\n                        error={!!error}\r\n                        helperText={error}\r\n                        value={inpValue}\r\n                        onChange={onInpValueChange}\r\n                        onKeyPress={onKeyPressInpValueChange}\r\n                    />\r\n                </div>\r\n                <IconButton\r\n                    style={{alignSelf: 'flex-start'}}\r\n                    color=\"primary\"\r\n                    onClick={addNewTask}\r\n                    aria-label=\"Add\">\r\n                    <Add />\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport './Button.scss'\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    title?: string\r\n    className?: string\r\n    color: ColorType\r\n    variant: VariantType\r\n    onClick: () => void\r\n}\r\ntype ColorType = \"inherit\" | \"primary\" | \"secondary\" | \"default\" | undefined\r\ntype VariantType = \"text\" | \"outlined\" | \"contained\" | undefined\r\n\r\nexport function MyButton(props: PropsType) {\r\n    return (\r\n        <div className={'Button'}>\r\n            <Button\r\n                variant={props.variant}\r\n                color={props.color}\r\n                className={props.className}\r\n                onClick={props.onClick}>\r\n                {props.title}\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, FocusEvent, KeyboardEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype PropsType = {\r\n    label: string\r\n    value: string\r\n    error: boolean\r\n    autoFocus: boolean\r\n    type: string\r\n    helperText: string\r\n    onKeyPress: (e: KeyboardEvent<HTMLInputElement>) => void\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onBlur: (e: FocusEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport function MyInput(props: PropsType) {\r\n    return (\r\n        <div>\r\n            <TextField\r\n                autoFocus={props.autoFocus}\r\n                label={props.label}\r\n                error={props.error}\r\n                helperText={props.helperText}\r\n                onKeyPress={props.onKeyPress}\r\n                onChange={props.onChange}\r\n                onBlur={props.onBlur}\r\n                value={props.value}\r\n                type={props.type}/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, FocusEvent, useState} from \"react\";\r\nimport './EditableTitle.scss';\r\nimport {MyInput} from \"../Input/MyInput\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    error: string\r\n    onChange: (title: string) => void\r\n    onKeyPress: (title: string) => void\r\n}\r\n\r\nexport const EditableTitle = React.memo(function EditableTitle(props: PropsType) {\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const isInpEmpty = (value: string) => value.trim() === '';\r\n    const showError = () => {\r\n        setTitle('');\r\n        setError(props.error);\r\n    }\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const disableActiveMode = (e: FocusEvent<HTMLInputElement>) => {\r\n        if (!isInpEmpty(e.currentTarget.defaultValue)) {\r\n            setEditMode(false);\r\n            setError('');\r\n            props.onChange(title);\r\n        } else {\r\n            showError()\r\n        }\r\n    }\r\n    const onTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError('')\r\n    }\r\n    const onKeyTitleChangeHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            if (!isInpEmpty(title)) {\r\n                props.onKeyPress(title);\r\n                setEditMode(false);\r\n            } else {\r\n                showError()\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'EditableTitle'}>\r\n            {\r\n                editMode\r\n                    ? <MyInput\r\n                        label=\"Change title\"\r\n                        error={!!error}\r\n                        helperText={error}\r\n                        onKeyPress={onKeyTitleChangeHandler}\r\n                        onChange={onTitleChangeHandler}\r\n                        onBlur={disableActiveMode}\r\n                        value={title}\r\n                        autoFocus\r\n                        type=\"text\"/>\r\n                    : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n            }\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport {updateTaskTC} from \"../../Redux/State/task-reducer\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableTitle} from \"../EditableTitle/EditableTitle\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TaskStatus, TaskType} from \"../../api/todolist-api\";\r\n\r\ntype PropsType = {\r\n    taskTitleError: string\r\n    todoListId: string\r\n    task: TaskType\r\n    deleteTask: (taskId: string, todoListId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(function Task(props: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const changeTaskStatus = React.useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTaskTC(props.todoListId, props.task.id,\r\n            {status : e.currentTarget.checked ? TaskStatus.Completed : TaskStatus.New}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = React.useCallback((title: string) => {\r\n        dispatch(updateTaskTC(props.todoListId, props.task.id, {title}))\r\n    }, [dispatch])\r\n\r\n    const onKeyChangeTaskTitle = React.useCallback((title: string) => {\r\n        dispatch(updateTaskTC(props.todoListId, props.task.id, {title}))\r\n    }, [dispatch])\r\n\r\n    return <li className={props.task.status === TaskStatus.Completed ? 'done' : ''}>\r\n        <Checkbox\r\n            color=\"primary\"\r\n            id={props.task.id}\r\n            checked={props.task.status === TaskStatus.Completed}\r\n            onChange={changeTaskStatus}/>\r\n        <EditableTitle\r\n            error={props.taskTitleError}\r\n            onKeyPress={onKeyChangeTaskTitle}\r\n            onChange={changeTaskTitle}\r\n            title={props.task.title}/>\r\n        <IconButton onClick={() => props.deleteTask(props.task.id, props.todoListId)}>\r\n            <DeleteIcon/>\r\n        </IconButton>\r\n    </li>\r\n})","import React from \"react\";\r\nimport './TodoList.scss';\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {MyButton} from \"../Button/MyButton\";\r\nimport {EditableTitle} from \"../EditableTitle/EditableTitle\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../Redux/store\";\r\nimport {addTaskTC, deleteTaskTC, fetchTasksTC} from \"../../Redux/State/task-reducer\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {TaskStatus, TaskType} from \"../../api/todolist-api\";\r\nimport {FilterType, TodoListDomainType} from \"../../Redux/State/todolist-reducer\";\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype PropsType = {\r\n    todoList: TodoListDomainType\r\n    todoFilter: (value: FilterType, todoListId: string) => void\r\n    deleteItem: (id: string) => void\r\n    changeTodoListTitle: (title: string, id: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo( function TodoList(props: PropsType) {\r\n\r\n    const taskErrorText: string = 'Task is required. Enter the task!';\r\n    const taskTitleError: string = 'Task required';\r\n    const todoListTitleError: string = 'Title required';\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<RootReducerType, Array<TaskType>>(state => state.tasks[props.todoList.id])\r\n\r\n    React.useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todoList.id))\r\n    }, [])\r\n\r\n    const setTaskFilterAll = React.useCallback(() => {\r\n        props.todoFilter('all', props.todoList.id);\r\n    }, [props.todoFilter, props.todoList.id])\r\n\r\n    const setTaskFilterActive = React.useCallback(() => {\r\n        props.todoFilter('active', props.todoList.id);\r\n    }, [props.todoFilter,props.todoList.id])\r\n\r\n    const setTaskFilterCompleted = React.useCallback(() => {\r\n        props.todoFilter('completed', props.todoList.id);\r\n    }, [props.todoFilter,props.todoList.id])\r\n\r\n    const deleteTask = React.useCallback((id: string, todoListId: string) => {\r\n        dispatch(deleteTaskTC(todoListId, id))\r\n    }, [dispatch])\r\n\r\n    const addNewTask = React.useCallback((title: string) => {\r\n        dispatch(addTaskTC(props.todoList.id, title))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = React.useCallback((title: string) => {\r\n        props.changeTodoListTitle(title, props.todoList.id);\r\n    },[props.changeTodoListTitle, props.todoList.id])\r\n\r\n    const changeTodoListTitleOnKey = React.useCallback((title: string) => {\r\n        props.changeTodoListTitle(title, props.todoList.id);\r\n    }, [props.changeTodoListTitle, props.todoList.id])\r\n\r\n    let allTodoListTasks = tasks\r\n    let tasksForTodoList = allTodoListTasks;\r\n\r\n    if (props.todoList.filter === 'active') {\r\n        tasksForTodoList = allTodoListTasks.filter(t => t.status === TaskStatus.New);\r\n    }\r\n    if (props.todoList.filter === 'completed') {\r\n        tasksForTodoList = allTodoListTasks.filter(t => t.status === TaskStatus.Completed);\r\n    }\r\n\r\n    return (\r\n        <div className={`TodoList ${props.todoList.entityStatus === 'loading' && 'disable'}`}>\r\n            <div className={'todoListTitle'}>\r\n                <EditableTitle\r\n                    error={todoListTitleError}\r\n                    onKeyPress={changeTodoListTitleOnKey}\r\n                    onChange={changeTodoListTitle}\r\n                    title={props.todoList.title}/>\r\n                <IconButton onClick={() => props.deleteItem(props.todoList.id)}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </div>\r\n            <AddItemForm\r\n                errorText={taskErrorText}\r\n                addItem={(title) => addNewTask(title)}/>\r\n            <ul className={'lists'}>\r\n                {\r\n                    tasksForTodoList.map(task => <Task\r\n                        key={task.id}\r\n                        todoListId={props.todoList.id}\r\n                        deleteTask={deleteTask}\r\n                        task={task}\r\n                        taskTitleError={taskTitleError}/>)\r\n                }\r\n            </ul>\r\n            <div className={'buttonBox'}>\r\n                <MyButton\r\n                    variant={props.todoList.filter === 'all' ? 'contained' : \"text\"}\r\n                    color={'default'}\r\n                    onClick={setTaskFilterAll}\r\n                    title={'All'}/>\r\n                <MyButton\r\n                    variant={props.todoList.filter === 'active' ? 'contained' : 'text'}\r\n                    color={'secondary'}\r\n                    onClick={setTaskFilterActive}\r\n                    title={'Active'}/>\r\n                <MyButton\r\n                    variant={props.todoList.filter === 'completed' ? 'contained' : 'text'}\r\n                    color={\"primary\"}\r\n                    onClick={setTaskFilterCompleted}\r\n                    title={'Completed'}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {TodoList} from \"../TodoList/TodoList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../Redux/store\";\r\nimport {\r\n    changeFilterTodoListAC, createNewTodoListTC,\r\n    deleteTodoListTC, fetchTodoListsTC,\r\n    FilterType,\r\n    TodoListDomainType,\r\n    updateTodoListTitleTC\r\n} from \"../../Redux/State/todolist-reducer\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport function TodoLists() {\r\n\r\n    const todoListErrorText: string = 'Title is required. Enter the title!'\r\n    const todoListTitle: string = 'Create List'\r\n\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<RootReducerType, Array<TodoListDomainType>>(state => state.todoLists)\r\n    const isSignIn = useSelector<RootReducerType, boolean>(state => state.auth.isSignIn)\r\n\r\n    React.useEffect(() => {\r\n        // If user is not sign in, app do not fetch todos.\r\n        if (!isSignIn) return\r\n        dispatch(fetchTodoListsTC())\r\n    }, [])\r\n\r\n    const deleteTodoList = React.useCallback((todoListId: string) => {\r\n        dispatch(deleteTodoListTC(todoListId))\r\n    }, [dispatch])\r\n\r\n    const setNewTodoTitle = React.useCallback((title: string, id: string) => {\r\n        dispatch(updateTodoListTitleTC(id, title))\r\n    }, [dispatch])\r\n\r\n    const todoFilter = React.useCallback((filter: FilterType, todoListId: string) => {\r\n        dispatch(changeFilterTodoListAC(filter, todoListId))\r\n    }, [dispatch])\r\n\r\n    const addTodoList = React.useCallback((title: string) => {\r\n        dispatch(createNewTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    if (!isSignIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <AddItemForm\r\n                    errorText={todoListErrorText}\r\n                    title={todoListTitle}\r\n                    addItem={addTodoList}\r\n                />\r\n            </Grid>\r\n            {\r\n                todoLists.map(tl => {\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper elevation={3}>\r\n                            <TodoList\r\n                                todoList={tl}\r\n                                todoFilter={todoFilter}\r\n                                deleteItem={deleteTodoList}\r\n                                changeTodoListTitle={setNewTodoTitle}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../Redux/State/login-reducer\";\r\nimport {RootReducerType} from \"../../Redux/store\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport function Login() {\r\n\r\n    const dispatch = useDispatch()\r\n    const isSignIn = useSelector<RootReducerType, boolean>(state => state.auth.isSignIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            if (!values.email) return {email: 'Email is required!'}\r\n            if (!values.password) return {password: 'Password is required!'}\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    // If it has already been signed in, redirect to home page\r\n    if (isSignIn) return <Redirect to={'/'}/>\r\n\r\n    return (\r\n        <Grid container justify={'center'}>\r\n            <Grid item xs={4}>\r\n                {/*Hook useFormik gives handleSubmit function to take all form's values*/}\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>\r\n                                To sign in get registered <a href=\"https://social-network.samuraijs.com/\"\r\n                                                             target=\"_blank\">\r\n                                <strong>here</strong>\r\n                            </a>\r\n                            </p>\r\n                            <p>\r\n                                or use common test account credentials:\r\n                            </p>\r\n                            <p>\r\n                                Email: <b>free@samuraijs.com</b>\r\n                            </p>\r\n                            <p>\r\n                                Password: <b>free</b>\r\n                            </p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField type={'email'} label={'Email'} margin={'normal'}\r\n                                // Get all props from email\r\n                                       {...formik.getFieldProps('email')}\r\n                            />\r\n                            {/*Get an error message if email is not valid*/}\r\n                            {formik.errors.email && <div>{formik.errors.email}</div>}\r\n                            <TextField type={'password'} label={'Password'} margin={'normal'}\r\n                                       {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.errors.password && <div>{formik.errors.password}</div>}\r\n                            <FormControlLabel label={'Remember me'}\r\n                                              control={\r\n                                                  // Get all props from checkbox\r\n                                                  // checked value must be taken from formik\r\n                                                  <Checkbox color={'primary'} checked={formik.values.rememberMe}\r\n                                                            {...formik.getFieldProps('rememberMe')}\r\n                                                  />\r\n                                              }\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Sign in</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {CircularProgress, Container, Grid} from \"@material-ui/core\";\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"./Redux/store\";\r\nimport {Preloader} from \"./components/Preloader/Preloader\";\r\nimport {MySnackbar} from \"./components/Snackbar/Snackbar\";\r\nimport {initializedAppTC, StatusType} from \"./Redux/State/app-reducer\";\r\nimport {TodoLists} from \"./components/TodoLists/TodoLists\";\r\nimport {Route} from 'react-router-dom';\r\nimport {Login} from \"./components/Login/Login\";\r\n\r\nexport function App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<RootReducerType, StatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<RootReducerType, boolean>(state => state.app.initialized)\r\n\r\n    React.useEffect(() => {\r\n        dispatch(initializedAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div style={{position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            {status === 'loading' && <Preloader/>}\r\n            <MySnackbar/>\r\n            <Container maxWidth={\"lg\"}>\r\n                <Grid container spacing={2}>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route exact path={'/'} render={() => <TodoLists/>}/>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Redux/store\";\r\nimport {App} from \"./App\";\r\nimport {HashRouter as Router} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App/>\r\n        </Router>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n"],"sourceRoot":""}